plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.0'
}

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = gradlewVersion
}



subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.mjc.school'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework:spring-framework-bom:${springVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
        implementation 'org.mapstruct:mapstruct:1.5.3.Final'
        implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

      //  implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
      //  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

        implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'

//        testImplementation "org.springframework:spring-test:$springVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
        testImplementation 'org.mockito:mockito-core:5.1.1'
       // testImplementation "com.tngtech.archunit:archunit-junit5:1.0.0"
        testImplementation 'org.assertj:assertj-core:3.6.1'
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    }
    test {
        useJUnitPlatform()
    }
}

task repack(type: Jar, dependsOn: ':module-main:build') {
    if (findProject(':module-main') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-main').buildDir}/libs/module-main.jar")
        from(buildJar) { into('/') }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
}